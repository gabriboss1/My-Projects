<!-- I just learned JavaScript, so I decided to play around a little and couple it with my CSS and HTML knowledge to make this game of 2048. This has some room for improvement, but I am still very proud of my work. -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048 Game</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Poppins', Arial, sans-serif;
            background: linear-gradient(135deg, #faf8ef, #f2e5c7);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            text-align: center;
        }

        h1 {
            font-size: 3rem;
            color: #776e65;
            margin-bottom: 0.5rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* 4x4 layout */
            grid-template-rows: repeat(4, 1fr);
            gap: 10px;
            width: 90vmin; /* Grid adjusts dynamically */
            height: 90vmin;
            max-width: 500px; /* Prevent oversized grids */
            max-height: 500px;
            background: #bbada0;
            border-radius: 10px;
            margin: 0 auto;
        }

        .tile {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: calc(1.5rem + 1vmin); /* Dynamic font size */
            font-weight: bold;
            border-radius: 5px;
            text-align: center;
            transition: all 0.2s ease-in-out; /* Smooth scaling */
            color: #776e65;
        }

        .tile.merge-animation {
            transform: scale(1.2);
            transition: transform 0.2s ease-in-out;
        }

        .score-panel {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
            font-size: 1.2rem;
            color: #776e65;
        }

        .score, .high-score {
            background: #bbada0;
            padding: 10px 20px;
            border-radius: 5px;
            color: #f9f6f2;
            font-weight: bold;
        }


        .tile[data-value="2"] { background: #eee4da; }
        .tile[data-value="4"] { background: #ede0c8; }
        .tile[data-value="8"] { background: #f2b179; color: #f9f6f2; }
        .tile[data-value="16"] { background: #f59563; color: #f9f6f2; }
        .tile[data-value="32"] { background: #f67c5f; color: #f9f6f2; }
        .tile[data-value="64"] { background: #f65e3b; color: #f9f6f2; }
        .tile[data-value="128"] { background: #edcf72; color: #f9f6f2; }
        .tile[data-value="256"] { background: #edcc61; color: #f9f6f2; }
        .tile[data-value="512"] { background: #edc850; color: #f9f6f2; }
        .tile[data-value="1024"] { background: #edc53f; color: #f9f6f2; }
        .tile[data-value="2048"] { background: #edc22e; color: #f9f6f2; }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(238, 228, 218, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            color: #776e65;
            z-index: 10;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.3s;
        }

        .overlay.show {
            visibility: visible;
            opacity: 1;
        }

        button {
            margin-top: 20px;
            padding: 10px 20px;
            background: #8f7a66;
            color: #f9f6f2;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: background 0.3s ease;
        }

        button:hover {
            background: #776e65;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>2048</h1>
        <div class="score-panel">
            <div class="score">Score: <span id="score">0</span></div>
            <div class="high-score">High Score: <span id="high-score">0</span></div>
        </div>        
        <div class="game-board" id="game-board"></div>
        <button onclick="restartGame()">Restart</button>
        <div class="overlay" id="overlay"></div>
    </div>

    <script>
        class Game2048 {
            constructor(boardElement, overlayElement) {
                this.boardElement = boardElement;
                this.overlayElement = overlayElement;
                this.gridSize = 4;
                this.tiles = [];
                this.score = 0;
                this.highScore = parseInt(localStorage.getItem('highScore')) || 0;

                this.initGame(); 
                this.updateScore();
                this.bindEvents();
            }

            initGame() {
                this.tiles = Array.from({ length: this.gridSize }, () => Array(this.gridSize).fill(0));
                this.score = 0;
                this.addRandomTile();
                this.addRandomTile();
                this.updateBoard();
            }

            restartGame() {
                this.overlayElement.classList.remove('show');
                this.initGame(); 
            }

            updateScore() {
                document.getElementById('score').textContent = this.score;
                document.getElementById('high-score').textContent = this.highScore;
            }

            bindEvents() {
                window.addEventListener('keydown', (e) => {
                    let moved = false;
                    switch (e.key) {
                        case 'ArrowUp':
                            moved = this.move('up');
                            break;
                        case 'ArrowDown':
                            moved = this.move('down');
                            break;
                        case 'ArrowLeft':
                            moved = this.move('left');
                            break;
                        case 'ArrowRight':
                            moved = this.move('right');
                            break;
                        default:
                            return; 
                    }
                    if (moved && this.checkGameOver()) {
                        this.endGame();
                    }
                });
            }

            addRandomTile() {
                const emptyTiles = [];
                for (let row = 0; row < this.gridSize; row++) {
                    for (let col = 0; col < this.gridSize; col++) {
                        if (this.tiles[row][col] === 0) emptyTiles.push({ row, col });
                    }
                }
                if (emptyTiles.length > 0) {
                    const { row, col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];
                    this.tiles[row][col] = Math.random() < 0.9 ? 2 : 4;
                }
            }

            move(direction) {
                const previousTiles = JSON.stringify(this.tiles);

                if (direction === 'up' || direction === 'down') {
                    for (let col = 0; col < this.gridSize; col++) {
                        let column = [];
                        for (let row = 0; row < this.gridSize; row++) {
                            column.push(this.tiles[row][col]);
                        }
                        column = this.merge(column, direction === 'down');
                        for (let row = 0; row < this.gridSize; row++) {
                            this.tiles[row][col] = column[row];
                        }
                    }
                } else {
                    for (let row = 0; row < this.gridSize; row++) {
                        let rowTiles = this.tiles[row];
                        rowTiles = this.merge(rowTiles, direction === 'right');
                        this.tiles[row] = rowTiles;
                    }
                }

                const moved = JSON.stringify(this.tiles) !== previousTiles;
                if (moved) {
                    this.addRandomTile();
                    this.updateBoard();
                }
                return moved;
            }

            merge(line, reverse) {
                if (reverse) line.reverse();

                let newLine = line.filter(v => v !== 0);
                for (let i = 0; i < newLine.length - 1; i++) {
                    if (newLine[i] === newLine[i + 1]) {
                        newLine[i] *= 2;
                        this.score += newLine[i]; 
                        newLine[i + 1] = 0;

                        if (this.score > this.highScore) {
                            this.highScore = this.score;
                            localStorage.setItem('highScore', this.highScore);
                        }
                    }
                }

                newLine = newLine.filter(v => v !== 0);
                while (newLine.length < this.gridSize) newLine.push(0);

                if (reverse) newLine.reverse();
                return newLine;
            }

            checkGameOver() {
                for (let row = 0; row < this.gridSize; row++) {
                    for (let col = 0; col < this.gridSize; col++) {
                        if (this.tiles[row][col] === 0) return false;
                        if (
                            (row > 0 && this.tiles[row][col] === this.tiles[row - 1][col]) ||
                            (col > 0 && this.tiles[row][col] === this.tiles[row][col - 1]) ||
                            (row < this.gridSize - 1 && this.tiles[row][col] === this.tiles[row + 1][col]) ||
                            (col < this.gridSize - 1 && this.tiles[row][col] === this.tiles[row][col + 1])
                        ) {
                            return false;
                        }
                    }
                }
                return true;
            }

            endGame() {
                if (this.score > this.highScore) {
                    this.highScore = this.score;
                    localStorage.setItem('highScore', this.highScore);
                }
                this.updateScore();
                this.overlayElement.textContent = "Game Over!";
                this.overlayElement.classList.add('show');
            }

            updateBoard() {
                this.boardElement.innerHTML = ''; 

                for (let row = 0; row < this.gridSize; row++) {
                    for (let col = 0; col < this.gridSize; col++) {
                        if (this.tiles[row][col] !== 0) {
                            const tile = document.createElement('div');
                            tile.classList.add('tile');
                            tile.textContent = this.tiles[row][col];
                            tile.dataset.value = this.tiles[row][col];

                            tile.style.gridRowStart = row + 1;
                            tile.style.gridColumnStart = col + 1;

                            this.boardElement.appendChild(tile);
                        }
                    }
                }
            }
        }

        const boardElement = document.getElementById('game-board');
        const overlayElement = document.getElementById('overlay');
        const game = new Game2048(boardElement, overlayElement);

        function restartGame() {
            game.restartGame();
        }
    </script>
</body>
</html>
